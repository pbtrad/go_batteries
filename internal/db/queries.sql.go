// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getFastPowerData = `-- name: GetFastPowerData :one
SELECT requested_time, received_time, write_time, timestamp, manufacturer, manufacturer_serial, generation_active_power, grid_active_power, grid_reactive_power, battery_active_power, battery_apparent_power, soc FROM fast_power_data WHERE manufacturer = ? AND manufacturer_serial = ? AND timestamp = ?
`

type GetFastPowerDataParams struct {
	Manufacturer       string
	ManufacturerSerial string
	Timestamp          time.Time
}

func (q *Queries) GetFastPowerData(ctx context.Context, arg GetFastPowerDataParams) (FastPowerDatum, error) {
	row := q.db.QueryRowContext(ctx, getFastPowerData, arg.Manufacturer, arg.ManufacturerSerial, arg.Timestamp)
	var i FastPowerDatum
	err := row.Scan(
		&i.RequestedTime,
		&i.ReceivedTime,
		&i.WriteTime,
		&i.Timestamp,
		&i.Manufacturer,
		&i.ManufacturerSerial,
		&i.GenerationActivePower,
		&i.GridActivePower,
		&i.GridReactivePower,
		&i.BatteryActivePower,
		&i.BatteryApparentPower,
		&i.Soc,
	)
	return i, err
}

const insertFastPowerData = `-- name: InsertFastPowerData :exec
INSERT INTO fast_power_data (
    requested_time, received_time, write_time, timestamp, manufacturer, manufacturer_serial,
    generation_active_power, grid_active_power, grid_reactive_power, battery_active_power,
    battery_apparent_power, soc
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertFastPowerDataParams struct {
	RequestedTime         time.Time
	ReceivedTime          time.Time
	WriteTime             sql.NullTime
	Timestamp             time.Time
	Manufacturer          string
	ManufacturerSerial    string
	GenerationActivePower sql.NullString
	GridActivePower       sql.NullString
	GridReactivePower     sql.NullString
	BatteryActivePower    sql.NullString
	BatteryApparentPower  sql.NullString
	Soc                   sql.NullString
}

func (q *Queries) InsertFastPowerData(ctx context.Context, arg InsertFastPowerDataParams) error {
	_, err := q.db.ExecContext(ctx, insertFastPowerData,
		arg.RequestedTime,
		arg.ReceivedTime,
		arg.WriteTime,
		arg.Timestamp,
		arg.Manufacturer,
		arg.ManufacturerSerial,
		arg.GenerationActivePower,
		arg.GridActivePower,
		arg.GridReactivePower,
		arg.BatteryActivePower,
		arg.BatteryApparentPower,
		arg.Soc,
	)
	return err
}
