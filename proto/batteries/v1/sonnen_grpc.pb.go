// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/batteries/v1/sonnen.proto

package sonnen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BatteriesService_GetSonnenStatus_FullMethodName   = "/batteries.v1n.BatteriesService/GetSonnenStatus"
	BatteriesService_GetLatestData_FullMethodName     = "/batteries.v1n.BatteriesService/GetLatestData"
	BatteriesService_GetPowerMeterData_FullMethodName = "/batteries.v1n.BatteriesService/GetPowerMeterData"
	BatteriesService_GetEnergyData_FullMethodName     = "/batteries.v1n.BatteriesService/GetEnergyData"
	BatteriesService_ChargeSonnen_FullMethodName      = "/batteries.v1n.BatteriesService/ChargeSonnen"
	BatteriesService_DischargeSonnen_FullMethodName   = "/batteries.v1n.BatteriesService/DischargeSonnen"
)

// BatteriesServiceClient is the client API for BatteriesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BatteriesServiceClient interface {
	GetSonnenStatus(ctx context.Context, in *GetSonnenStatusRequest, opts ...grpc.CallOption) (*GetSonnenStatusResponse, error)
	GetLatestData(ctx context.Context, in *GetLatestDataRequest, opts ...grpc.CallOption) (*GetLatestDataResponse, error)
	GetPowerMeterData(ctx context.Context, in *GetPowerMeterDataRequest, opts ...grpc.CallOption) (*GetPowerMeterDataResponse, error)
	GetEnergyData(ctx context.Context, in *GetEnergyDataRequest, opts ...grpc.CallOption) (*GetEnergyDataResponse, error)
	ChargeSonnen(ctx context.Context, in *ChargeSonnenRequest, opts ...grpc.CallOption) (*ChargeSonnenResponse, error)
	DischargeSonnen(ctx context.Context, in *DischargeSonnenRequest, opts ...grpc.CallOption) (*DischargeSonnenResponse, error)
}

type batteriesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBatteriesServiceClient(cc grpc.ClientConnInterface) BatteriesServiceClient {
	return &batteriesServiceClient{cc}
}

func (c *batteriesServiceClient) GetSonnenStatus(ctx context.Context, in *GetSonnenStatusRequest, opts ...grpc.CallOption) (*GetSonnenStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSonnenStatusResponse)
	err := c.cc.Invoke(ctx, BatteriesService_GetSonnenStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteriesServiceClient) GetLatestData(ctx context.Context, in *GetLatestDataRequest, opts ...grpc.CallOption) (*GetLatestDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestDataResponse)
	err := c.cc.Invoke(ctx, BatteriesService_GetLatestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteriesServiceClient) GetPowerMeterData(ctx context.Context, in *GetPowerMeterDataRequest, opts ...grpc.CallOption) (*GetPowerMeterDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPowerMeterDataResponse)
	err := c.cc.Invoke(ctx, BatteriesService_GetPowerMeterData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteriesServiceClient) GetEnergyData(ctx context.Context, in *GetEnergyDataRequest, opts ...grpc.CallOption) (*GetEnergyDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnergyDataResponse)
	err := c.cc.Invoke(ctx, BatteriesService_GetEnergyData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteriesServiceClient) ChargeSonnen(ctx context.Context, in *ChargeSonnenRequest, opts ...grpc.CallOption) (*ChargeSonnenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChargeSonnenResponse)
	err := c.cc.Invoke(ctx, BatteriesService_ChargeSonnen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *batteriesServiceClient) DischargeSonnen(ctx context.Context, in *DischargeSonnenRequest, opts ...grpc.CallOption) (*DischargeSonnenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DischargeSonnenResponse)
	err := c.cc.Invoke(ctx, BatteriesService_DischargeSonnen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BatteriesServiceServer is the server API for BatteriesService service.
// All implementations must embed UnimplementedBatteriesServiceServer
// for forward compatibility.
type BatteriesServiceServer interface {
	GetSonnenStatus(context.Context, *GetSonnenStatusRequest) (*GetSonnenStatusResponse, error)
	GetLatestData(context.Context, *GetLatestDataRequest) (*GetLatestDataResponse, error)
	GetPowerMeterData(context.Context, *GetPowerMeterDataRequest) (*GetPowerMeterDataResponse, error)
	GetEnergyData(context.Context, *GetEnergyDataRequest) (*GetEnergyDataResponse, error)
	ChargeSonnen(context.Context, *ChargeSonnenRequest) (*ChargeSonnenResponse, error)
	DischargeSonnen(context.Context, *DischargeSonnenRequest) (*DischargeSonnenResponse, error)
	mustEmbedUnimplementedBatteriesServiceServer()
}

// UnimplementedBatteriesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBatteriesServiceServer struct{}

func (UnimplementedBatteriesServiceServer) GetSonnenStatus(context.Context, *GetSonnenStatusRequest) (*GetSonnenStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSonnenStatus not implemented")
}
func (UnimplementedBatteriesServiceServer) GetLatestData(context.Context, *GetLatestDataRequest) (*GetLatestDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestData not implemented")
}
func (UnimplementedBatteriesServiceServer) GetPowerMeterData(context.Context, *GetPowerMeterDataRequest) (*GetPowerMeterDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPowerMeterData not implemented")
}
func (UnimplementedBatteriesServiceServer) GetEnergyData(context.Context, *GetEnergyDataRequest) (*GetEnergyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnergyData not implemented")
}
func (UnimplementedBatteriesServiceServer) ChargeSonnen(context.Context, *ChargeSonnenRequest) (*ChargeSonnenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeSonnen not implemented")
}
func (UnimplementedBatteriesServiceServer) DischargeSonnen(context.Context, *DischargeSonnenRequest) (*DischargeSonnenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DischargeSonnen not implemented")
}
func (UnimplementedBatteriesServiceServer) mustEmbedUnimplementedBatteriesServiceServer() {}
func (UnimplementedBatteriesServiceServer) testEmbeddedByValue()                          {}

// UnsafeBatteriesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatteriesServiceServer will
// result in compilation errors.
type UnsafeBatteriesServiceServer interface {
	mustEmbedUnimplementedBatteriesServiceServer()
}

func RegisterBatteriesServiceServer(s grpc.ServiceRegistrar, srv BatteriesServiceServer) {
	// If the following call pancis, it indicates UnimplementedBatteriesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BatteriesService_ServiceDesc, srv)
}

func _BatteriesService_GetSonnenStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSonnenStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteriesServiceServer).GetSonnenStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatteriesService_GetSonnenStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteriesServiceServer).GetSonnenStatus(ctx, req.(*GetSonnenStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatteriesService_GetLatestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteriesServiceServer).GetLatestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatteriesService_GetLatestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteriesServiceServer).GetLatestData(ctx, req.(*GetLatestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatteriesService_GetPowerMeterData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPowerMeterDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteriesServiceServer).GetPowerMeterData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatteriesService_GetPowerMeterData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteriesServiceServer).GetPowerMeterData(ctx, req.(*GetPowerMeterDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatteriesService_GetEnergyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnergyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteriesServiceServer).GetEnergyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatteriesService_GetEnergyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteriesServiceServer).GetEnergyData(ctx, req.(*GetEnergyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatteriesService_ChargeSonnen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeSonnenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteriesServiceServer).ChargeSonnen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatteriesService_ChargeSonnen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteriesServiceServer).ChargeSonnen(ctx, req.(*ChargeSonnenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BatteriesService_DischargeSonnen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DischargeSonnenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BatteriesServiceServer).DischargeSonnen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BatteriesService_DischargeSonnen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BatteriesServiceServer).DischargeSonnen(ctx, req.(*DischargeSonnenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BatteriesService_ServiceDesc is the grpc.ServiceDesc for BatteriesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BatteriesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "batteries.v1n.BatteriesService",
	HandlerType: (*BatteriesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSonnenStatus",
			Handler:    _BatteriesService_GetSonnenStatus_Handler,
		},
		{
			MethodName: "GetLatestData",
			Handler:    _BatteriesService_GetLatestData_Handler,
		},
		{
			MethodName: "GetPowerMeterData",
			Handler:    _BatteriesService_GetPowerMeterData_Handler,
		},
		{
			MethodName: "GetEnergyData",
			Handler:    _BatteriesService_GetEnergyData_Handler,
		},
		{
			MethodName: "ChargeSonnen",
			Handler:    _BatteriesService_ChargeSonnen_Handler,
		},
		{
			MethodName: "DischargeSonnen",
			Handler:    _BatteriesService_DischargeSonnen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/batteries/v1/sonnen.proto",
}
