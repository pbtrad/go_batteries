// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/batteries/v1/sonnen.proto

package sonnen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSonnenStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSonnenStatusRequest) Reset() {
	*x = GetSonnenStatusRequest{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSonnenStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSonnenStatusRequest) ProtoMessage() {}

func (x *GetSonnenStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSonnenStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSonnenStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{0}
}

type GetSonnenStatusResponse struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	ApparentOutput            int32                  `protobuf:"varint,1,opt,name=apparent_output,json=apparentOutput,proto3" json:"apparent_output,omitempty"`
	BackupBuffer              int32                  `protobuf:"varint,2,opt,name=backup_buffer,json=backupBuffer,proto3" json:"backup_buffer,omitempty"`
	BatteryCharging           bool                   `protobuf:"varint,3,opt,name=battery_charging,json=batteryCharging,proto3" json:"battery_charging,omitempty"`
	BatteryDischarging        bool                   `protobuf:"varint,4,opt,name=battery_discharging,json=batteryDischarging,proto3" json:"battery_discharging,omitempty"`
	ConsumptionW              int32                  `protobuf:"varint,5,opt,name=consumption_w,json=consumptionW,proto3" json:"consumption_w,omitempty"`
	Fac                       float64                `protobuf:"fixed64,6,opt,name=fac,proto3" json:"fac,omitempty"`
	FlowConsumptionBattery    bool                   `protobuf:"varint,7,opt,name=flow_consumption_battery,json=flowConsumptionBattery,proto3" json:"flow_consumption_battery,omitempty"`
	FlowConsumptionGrid       bool                   `protobuf:"varint,8,opt,name=flow_consumption_grid,json=flowConsumptionGrid,proto3" json:"flow_consumption_grid,omitempty"`
	FlowConsumptionProduction bool                   `protobuf:"varint,9,opt,name=flow_consumption_production,json=flowConsumptionProduction,proto3" json:"flow_consumption_production,omitempty"`
	GridFeedInW               int32                  `protobuf:"varint,10,opt,name=grid_feed_in_w,json=gridFeedInW,proto3" json:"grid_feed_in_w,omitempty"`
	IsSystemInstalled         int32                  `protobuf:"varint,11,opt,name=is_system_installed,json=isSystemInstalled,proto3" json:"is_system_installed,omitempty"`
	OperatingMode             int32                  `protobuf:"varint,12,opt,name=operating_mode,json=operatingMode,proto3" json:"operating_mode,omitempty"`
	PacTotalW                 int32                  `protobuf:"varint,13,opt,name=pac_total_w,json=pacTotalW,proto3" json:"pac_total_w,omitempty"`
	ProductionW               int32                  `protobuf:"varint,14,opt,name=production_w,json=productionW,proto3" json:"production_w,omitempty"`
	Rsoc                      float64                `protobuf:"fixed64,15,opt,name=rsoc,proto3" json:"rsoc,omitempty"`
	SystemStatus              string                 `protobuf:"bytes,16,opt,name=system_status,json=systemStatus,proto3" json:"system_status,omitempty"`
	Timestamp                 string                 `protobuf:"bytes,17,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GetSonnenStatusResponse) Reset() {
	*x = GetSonnenStatusResponse{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSonnenStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSonnenStatusResponse) ProtoMessage() {}

func (x *GetSonnenStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSonnenStatusResponse.ProtoReflect.Descriptor instead.
func (*GetSonnenStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{1}
}

func (x *GetSonnenStatusResponse) GetApparentOutput() int32 {
	if x != nil {
		return x.ApparentOutput
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetBackupBuffer() int32 {
	if x != nil {
		return x.BackupBuffer
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetBatteryCharging() bool {
	if x != nil {
		return x.BatteryCharging
	}
	return false
}

func (x *GetSonnenStatusResponse) GetBatteryDischarging() bool {
	if x != nil {
		return x.BatteryDischarging
	}
	return false
}

func (x *GetSonnenStatusResponse) GetConsumptionW() int32 {
	if x != nil {
		return x.ConsumptionW
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetFac() float64 {
	if x != nil {
		return x.Fac
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetFlowConsumptionBattery() bool {
	if x != nil {
		return x.FlowConsumptionBattery
	}
	return false
}

func (x *GetSonnenStatusResponse) GetFlowConsumptionGrid() bool {
	if x != nil {
		return x.FlowConsumptionGrid
	}
	return false
}

func (x *GetSonnenStatusResponse) GetFlowConsumptionProduction() bool {
	if x != nil {
		return x.FlowConsumptionProduction
	}
	return false
}

func (x *GetSonnenStatusResponse) GetGridFeedInW() int32 {
	if x != nil {
		return x.GridFeedInW
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetIsSystemInstalled() int32 {
	if x != nil {
		return x.IsSystemInstalled
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetOperatingMode() int32 {
	if x != nil {
		return x.OperatingMode
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetPacTotalW() int32 {
	if x != nil {
		return x.PacTotalW
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetProductionW() int32 {
	if x != nil {
		return x.ProductionW
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetRsoc() float64 {
	if x != nil {
		return x.Rsoc
	}
	return 0
}

func (x *GetSonnenStatusResponse) GetSystemStatus() string {
	if x != nil {
		return x.SystemStatus
	}
	return ""
}

func (x *GetSonnenStatusResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type GetLatestDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestDataRequest) Reset() {
	*x = GetLatestDataRequest{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDataRequest) ProtoMessage() {}

func (x *GetLatestDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDataRequest.ProtoReflect.Descriptor instead.
func (*GetLatestDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{2}
}

type GetLatestDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rsoc          float64                `protobuf:"fixed64,1,opt,name=rsoc,proto3" json:"rsoc,omitempty"`
	ConsumptionW  int32                  `protobuf:"varint,2,opt,name=consumption_w,json=consumptionW,proto3" json:"consumption_w,omitempty"`
	ProductionW   int32                  `protobuf:"varint,3,opt,name=production_w,json=productionW,proto3" json:"production_w,omitempty"`
	GridFeedInW   int32                  `protobuf:"varint,4,opt,name=grid_feed_in_w,json=gridFeedInW,proto3" json:"grid_feed_in_w,omitempty"`
	Timestamp     string                 `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestDataResponse) Reset() {
	*x = GetLatestDataResponse{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDataResponse) ProtoMessage() {}

func (x *GetLatestDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDataResponse.ProtoReflect.Descriptor instead.
func (*GetLatestDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{3}
}

func (x *GetLatestDataResponse) GetRsoc() float64 {
	if x != nil {
		return x.Rsoc
	}
	return 0
}

func (x *GetLatestDataResponse) GetConsumptionW() int32 {
	if x != nil {
		return x.ConsumptionW
	}
	return 0
}

func (x *GetLatestDataResponse) GetProductionW() int32 {
	if x != nil {
		return x.ProductionW
	}
	return 0
}

func (x *GetLatestDataResponse) GetGridFeedInW() int32 {
	if x != nil {
		return x.GridFeedInW
	}
	return 0
}

func (x *GetLatestDataResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type GetPowerMeterDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPowerMeterDataRequest) Reset() {
	*x = GetPowerMeterDataRequest{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPowerMeterDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerMeterDataRequest) ProtoMessage() {}

func (x *GetPowerMeterDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerMeterDataRequest.ProtoReflect.Descriptor instead.
func (*GetPowerMeterDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{4}
}

type GetPowerMeterDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoltageL1     float64                `protobuf:"fixed64,1,opt,name=voltage_l1,json=voltageL1,proto3" json:"voltage_l1,omitempty"`
	CurrentL1     float64                `protobuf:"fixed64,2,opt,name=current_l1,json=currentL1,proto3" json:"current_l1,omitempty"`
	PowerL1       float64                `protobuf:"fixed64,3,opt,name=power_l1,json=powerL1,proto3" json:"power_l1,omitempty"`
	VoltageL2     float64                `protobuf:"fixed64,4,opt,name=voltage_l2,json=voltageL2,proto3" json:"voltage_l2,omitempty"`
	CurrentL2     float64                `protobuf:"fixed64,5,opt,name=current_l2,json=currentL2,proto3" json:"current_l2,omitempty"`
	PowerL2       float64                `protobuf:"fixed64,6,opt,name=power_l2,json=powerL2,proto3" json:"power_l2,omitempty"`
	VoltageL3     float64                `protobuf:"fixed64,7,opt,name=voltage_l3,json=voltageL3,proto3" json:"voltage_l3,omitempty"`
	CurrentL3     float64                `protobuf:"fixed64,8,opt,name=current_l3,json=currentL3,proto3" json:"current_l3,omitempty"`
	PowerL3       float64                `protobuf:"fixed64,9,opt,name=power_l3,json=powerL3,proto3" json:"power_l3,omitempty"`
	TotalPower    float64                `protobuf:"fixed64,10,opt,name=total_power,json=totalPower,proto3" json:"total_power,omitempty"`
	Timestamp     string                 `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPowerMeterDataResponse) Reset() {
	*x = GetPowerMeterDataResponse{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPowerMeterDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerMeterDataResponse) ProtoMessage() {}

func (x *GetPowerMeterDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerMeterDataResponse.ProtoReflect.Descriptor instead.
func (*GetPowerMeterDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{5}
}

func (x *GetPowerMeterDataResponse) GetVoltageL1() float64 {
	if x != nil {
		return x.VoltageL1
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetCurrentL1() float64 {
	if x != nil {
		return x.CurrentL1
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetPowerL1() float64 {
	if x != nil {
		return x.PowerL1
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetVoltageL2() float64 {
	if x != nil {
		return x.VoltageL2
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetCurrentL2() float64 {
	if x != nil {
		return x.CurrentL2
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetPowerL2() float64 {
	if x != nil {
		return x.PowerL2
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetVoltageL3() float64 {
	if x != nil {
		return x.VoltageL3
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetCurrentL3() float64 {
	if x != nil {
		return x.CurrentL3
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetPowerL3() float64 {
	if x != nil {
		return x.PowerL3
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetTotalPower() float64 {
	if x != nil {
		return x.TotalPower
	}
	return 0
}

func (x *GetPowerMeterDataResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type GetEnergyDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEnergyDataRequest) Reset() {
	*x = GetEnergyDataRequest{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnergyDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnergyDataRequest) ProtoMessage() {}

func (x *GetEnergyDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnergyDataRequest.ProtoReflect.Descriptor instead.
func (*GetEnergyDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{6}
}

type GetEnergyDataResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TotalConsumptionKwh     float64                `protobuf:"fixed64,1,opt,name=total_consumption_kwh,json=totalConsumptionKwh,proto3" json:"total_consumption_kwh,omitempty"`
	TotalProductionKwh      float64                `protobuf:"fixed64,2,opt,name=total_production_kwh,json=totalProductionKwh,proto3" json:"total_production_kwh,omitempty"`
	TotalGridFeedInKwh      float64                `protobuf:"fixed64,3,opt,name=total_grid_feed_in_kwh,json=totalGridFeedInKwh,proto3" json:"total_grid_feed_in_kwh,omitempty"`
	TotalGridConsumptionKwh float64                `protobuf:"fixed64,4,opt,name=total_grid_consumption_kwh,json=totalGridConsumptionKwh,proto3" json:"total_grid_consumption_kwh,omitempty"`
	Timestamp               string                 `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetEnergyDataResponse) Reset() {
	*x = GetEnergyDataResponse{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnergyDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnergyDataResponse) ProtoMessage() {}

func (x *GetEnergyDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnergyDataResponse.ProtoReflect.Descriptor instead.
func (*GetEnergyDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{7}
}

func (x *GetEnergyDataResponse) GetTotalConsumptionKwh() float64 {
	if x != nil {
		return x.TotalConsumptionKwh
	}
	return 0
}

func (x *GetEnergyDataResponse) GetTotalProductionKwh() float64 {
	if x != nil {
		return x.TotalProductionKwh
	}
	return 0
}

func (x *GetEnergyDataResponse) GetTotalGridFeedInKwh() float64 {
	if x != nil {
		return x.TotalGridFeedInKwh
	}
	return 0
}

func (x *GetEnergyDataResponse) GetTotalGridConsumptionKwh() float64 {
	if x != nil {
		return x.TotalGridConsumptionKwh
	}
	return 0
}

func (x *GetEnergyDataResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type ChargeSonnenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Watt          int32                  `protobuf:"varint,1,opt,name=watt,proto3" json:"watt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChargeSonnenRequest) Reset() {
	*x = ChargeSonnenRequest{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChargeSonnenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeSonnenRequest) ProtoMessage() {}

func (x *ChargeSonnenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeSonnenRequest.ProtoReflect.Descriptor instead.
func (*ChargeSonnenRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{8}
}

func (x *ChargeSonnenRequest) GetWatt() int32 {
	if x != nil {
		return x.Watt
	}
	return 0
}

type ChargeSonnenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Watt          int32                  `protobuf:"varint,3,opt,name=watt,proto3" json:"watt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChargeSonnenResponse) Reset() {
	*x = ChargeSonnenResponse{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChargeSonnenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeSonnenResponse) ProtoMessage() {}

func (x *ChargeSonnenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeSonnenResponse.ProtoReflect.Descriptor instead.
func (*ChargeSonnenResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{9}
}

func (x *ChargeSonnenResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChargeSonnenResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChargeSonnenResponse) GetWatt() int32 {
	if x != nil {
		return x.Watt
	}
	return 0
}

type DischargeSonnenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Watt          int32                  `protobuf:"varint,1,opt,name=watt,proto3" json:"watt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DischargeSonnenRequest) Reset() {
	*x = DischargeSonnenRequest{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DischargeSonnenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DischargeSonnenRequest) ProtoMessage() {}

func (x *DischargeSonnenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DischargeSonnenRequest.ProtoReflect.Descriptor instead.
func (*DischargeSonnenRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{10}
}

func (x *DischargeSonnenRequest) GetWatt() int32 {
	if x != nil {
		return x.Watt
	}
	return 0
}

type DischargeSonnenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Watt          int32                  `protobuf:"varint,3,opt,name=watt,proto3" json:"watt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DischargeSonnenResponse) Reset() {
	*x = DischargeSonnenResponse{}
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DischargeSonnenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DischargeSonnenResponse) ProtoMessage() {}

func (x *DischargeSonnenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_sonnen_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DischargeSonnenResponse.ProtoReflect.Descriptor instead.
func (*DischargeSonnenResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_sonnen_proto_rawDescGZIP(), []int{11}
}

func (x *DischargeSonnenResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DischargeSonnenResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DischargeSonnenResponse) GetWatt() int32 {
	if x != nil {
		return x.Watt
	}
	return 0
}

var File_proto_batteries_v1_sonnen_proto protoreflect.FileDescriptor

var file_proto_batteries_v1_sonnen_proto_rawDesc = string([]byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x6e,
	0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbe, 0x05, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x53, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x2f, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x66, 0x61, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x66, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0e, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67,
	0x72, 0x69, 0x64, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x57, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x63, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x57, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x6f, 0x63, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x6f, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x16, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x73, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x73, 0x6f,
	0x63, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x12, 0x23, 0x0a, 0x0e, 0x67, 0x72, 0x69,
	0x64, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x67, 0x72, 0x69, 0x64, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x57, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1a, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x4c, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4c, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x31, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x32, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x32, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x32, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x6c, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x33, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4c, 0x33, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x6c, 0x33, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x33, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x77, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x77, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x77, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x77, 0x68, 0x12, 0x32, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6b,
	0x77, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47,
	0x72, 0x69, 0x64, 0x46, 0x65, 0x65, 0x64, 0x49, 0x6e, 0x4b, 0x77, 0x68, 0x12, 0x3b, 0x0a, 0x1a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x77, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x77, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x53, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x61, 0x74, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x61,
	0x74, 0x74, 0x22, 0x5e, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x6e, 0x6e,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x77, 0x61, 0x74, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x61,
	0x74, 0x74, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x61, 0x74, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x61, 0x74, 0x74,
	0x22, 0x61, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x6e,
	0x6e, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x61, 0x74, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77,
	0x61, 0x74, 0x74, 0x32, 0xdb, 0x04, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x2e,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x6e, 0x6e,
	0x65, 0x6e, 0x12, 0x22, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x6e,
	0x6e, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x0f, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x6e, 0x6e, 0x65, 0x6e,
	0x12, 0x25, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x6e,
	0x2e, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x6f, 0x6e, 0x6e, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x53, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x62, 0x74, 0x72, 0x61, 0x64, 0x2f, 0x67, 0x6f, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x6e, 0x6e, 0x65, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_batteries_v1_sonnen_proto_rawDescOnce sync.Once
	file_proto_batteries_v1_sonnen_proto_rawDescData []byte
)

func file_proto_batteries_v1_sonnen_proto_rawDescGZIP() []byte {
	file_proto_batteries_v1_sonnen_proto_rawDescOnce.Do(func() {
		file_proto_batteries_v1_sonnen_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_batteries_v1_sonnen_proto_rawDesc), len(file_proto_batteries_v1_sonnen_proto_rawDesc)))
	})
	return file_proto_batteries_v1_sonnen_proto_rawDescData
}

var file_proto_batteries_v1_sonnen_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_batteries_v1_sonnen_proto_goTypes = []any{
	(*GetSonnenStatusRequest)(nil),    // 0: batteries.v1n.GetSonnenStatusRequest
	(*GetSonnenStatusResponse)(nil),   // 1: batteries.v1n.GetSonnenStatusResponse
	(*GetLatestDataRequest)(nil),      // 2: batteries.v1n.GetLatestDataRequest
	(*GetLatestDataResponse)(nil),     // 3: batteries.v1n.GetLatestDataResponse
	(*GetPowerMeterDataRequest)(nil),  // 4: batteries.v1n.GetPowerMeterDataRequest
	(*GetPowerMeterDataResponse)(nil), // 5: batteries.v1n.GetPowerMeterDataResponse
	(*GetEnergyDataRequest)(nil),      // 6: batteries.v1n.GetEnergyDataRequest
	(*GetEnergyDataResponse)(nil),     // 7: batteries.v1n.GetEnergyDataResponse
	(*ChargeSonnenRequest)(nil),       // 8: batteries.v1n.ChargeSonnenRequest
	(*ChargeSonnenResponse)(nil),      // 9: batteries.v1n.ChargeSonnenResponse
	(*DischargeSonnenRequest)(nil),    // 10: batteries.v1n.DischargeSonnenRequest
	(*DischargeSonnenResponse)(nil),   // 11: batteries.v1n.DischargeSonnenResponse
}
var file_proto_batteries_v1_sonnen_proto_depIdxs = []int32{
	0,  // 0: batteries.v1n.BatteriesService.GetSonnenStatus:input_type -> batteries.v1n.GetSonnenStatusRequest
	2,  // 1: batteries.v1n.BatteriesService.GetLatestData:input_type -> batteries.v1n.GetLatestDataRequest
	4,  // 2: batteries.v1n.BatteriesService.GetPowerMeterData:input_type -> batteries.v1n.GetPowerMeterDataRequest
	6,  // 3: batteries.v1n.BatteriesService.GetEnergyData:input_type -> batteries.v1n.GetEnergyDataRequest
	8,  // 4: batteries.v1n.BatteriesService.ChargeSonnen:input_type -> batteries.v1n.ChargeSonnenRequest
	10, // 5: batteries.v1n.BatteriesService.DischargeSonnen:input_type -> batteries.v1n.DischargeSonnenRequest
	1,  // 6: batteries.v1n.BatteriesService.GetSonnenStatus:output_type -> batteries.v1n.GetSonnenStatusResponse
	3,  // 7: batteries.v1n.BatteriesService.GetLatestData:output_type -> batteries.v1n.GetLatestDataResponse
	5,  // 8: batteries.v1n.BatteriesService.GetPowerMeterData:output_type -> batteries.v1n.GetPowerMeterDataResponse
	7,  // 9: batteries.v1n.BatteriesService.GetEnergyData:output_type -> batteries.v1n.GetEnergyDataResponse
	9,  // 10: batteries.v1n.BatteriesService.ChargeSonnen:output_type -> batteries.v1n.ChargeSonnenResponse
	11, // 11: batteries.v1n.BatteriesService.DischargeSonnen:output_type -> batteries.v1n.DischargeSonnenResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_batteries_v1_sonnen_proto_init() }
func file_proto_batteries_v1_sonnen_proto_init() {
	if File_proto_batteries_v1_sonnen_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_batteries_v1_sonnen_proto_rawDesc), len(file_proto_batteries_v1_sonnen_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_batteries_v1_sonnen_proto_goTypes,
		DependencyIndexes: file_proto_batteries_v1_sonnen_proto_depIdxs,
		MessageInfos:      file_proto_batteries_v1_sonnen_proto_msgTypes,
	}.Build()
	File_proto_batteries_v1_sonnen_proto = out.File
	file_proto_batteries_v1_sonnen_proto_goTypes = nil
	file_proto_batteries_v1_sonnen_proto_depIdxs = nil
}
