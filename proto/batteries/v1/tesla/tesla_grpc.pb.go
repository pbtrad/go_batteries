// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/batteries/v1/tesla/tesla.proto

package tesla

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TeslaBatteryService_GetTeslaBatteryStatus_FullMethodName = "/batteries.v1.TeslaBatteryService/GetTeslaBatteryStatus"
	TeslaBatteryService_UpdateBackupReserve_FullMethodName   = "/batteries.v1.TeslaBatteryService/UpdateBackupReserve"
	TeslaBatteryService_ToggleStormMode_FullMethodName       = "/batteries.v1.TeslaBatteryService/ToggleStormMode"
	TeslaBatteryService_SetOperationMode_FullMethodName      = "/batteries.v1.TeslaBatteryService/SetOperationMode"
	TeslaBatteryService_GetPowerUsage_FullMethodName         = "/batteries.v1.TeslaBatteryService/GetPowerUsage"
)

// TeslaBatteryServiceClient is the client API for TeslaBatteryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeslaBatteryServiceClient interface {
	GetTeslaBatteryStatus(ctx context.Context, in *GetTeslaBatteryStatusRequest, opts ...grpc.CallOption) (*TeslaBatteryState, error)
	UpdateBackupReserve(ctx context.Context, in *UpdateBackupReserveRequest, opts ...grpc.CallOption) (*UpdateBackupReserveResponse, error)
	ToggleStormMode(ctx context.Context, in *ToggleStormModeRequest, opts ...grpc.CallOption) (*ToggleStormModeResponse, error)
	SetOperationMode(ctx context.Context, in *SetOperationModeRequest, opts ...grpc.CallOption) (*SetOperationModeResponse, error)
	GetPowerUsage(ctx context.Context, in *GetPowerUsageRequest, opts ...grpc.CallOption) (*GetPowerUsageResponse, error)
}

type teslaBatteryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeslaBatteryServiceClient(cc grpc.ClientConnInterface) TeslaBatteryServiceClient {
	return &teslaBatteryServiceClient{cc}
}

func (c *teslaBatteryServiceClient) GetTeslaBatteryStatus(ctx context.Context, in *GetTeslaBatteryStatusRequest, opts ...grpc.CallOption) (*TeslaBatteryState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TeslaBatteryState)
	err := c.cc.Invoke(ctx, TeslaBatteryService_GetTeslaBatteryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teslaBatteryServiceClient) UpdateBackupReserve(ctx context.Context, in *UpdateBackupReserveRequest, opts ...grpc.CallOption) (*UpdateBackupReserveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBackupReserveResponse)
	err := c.cc.Invoke(ctx, TeslaBatteryService_UpdateBackupReserve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teslaBatteryServiceClient) ToggleStormMode(ctx context.Context, in *ToggleStormModeRequest, opts ...grpc.CallOption) (*ToggleStormModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleStormModeResponse)
	err := c.cc.Invoke(ctx, TeslaBatteryService_ToggleStormMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teslaBatteryServiceClient) SetOperationMode(ctx context.Context, in *SetOperationModeRequest, opts ...grpc.CallOption) (*SetOperationModeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOperationModeResponse)
	err := c.cc.Invoke(ctx, TeslaBatteryService_SetOperationMode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teslaBatteryServiceClient) GetPowerUsage(ctx context.Context, in *GetPowerUsageRequest, opts ...grpc.CallOption) (*GetPowerUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPowerUsageResponse)
	err := c.cc.Invoke(ctx, TeslaBatteryService_GetPowerUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeslaBatteryServiceServer is the server API for TeslaBatteryService service.
// All implementations must embed UnimplementedTeslaBatteryServiceServer
// for forward compatibility.
type TeslaBatteryServiceServer interface {
	GetTeslaBatteryStatus(context.Context, *GetTeslaBatteryStatusRequest) (*TeslaBatteryState, error)
	UpdateBackupReserve(context.Context, *UpdateBackupReserveRequest) (*UpdateBackupReserveResponse, error)
	ToggleStormMode(context.Context, *ToggleStormModeRequest) (*ToggleStormModeResponse, error)
	SetOperationMode(context.Context, *SetOperationModeRequest) (*SetOperationModeResponse, error)
	GetPowerUsage(context.Context, *GetPowerUsageRequest) (*GetPowerUsageResponse, error)
	mustEmbedUnimplementedTeslaBatteryServiceServer()
}

// UnimplementedTeslaBatteryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeslaBatteryServiceServer struct{}

func (UnimplementedTeslaBatteryServiceServer) GetTeslaBatteryStatus(context.Context, *GetTeslaBatteryStatusRequest) (*TeslaBatteryState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeslaBatteryStatus not implemented")
}
func (UnimplementedTeslaBatteryServiceServer) UpdateBackupReserve(context.Context, *UpdateBackupReserveRequest) (*UpdateBackupReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackupReserve not implemented")
}
func (UnimplementedTeslaBatteryServiceServer) ToggleStormMode(context.Context, *ToggleStormModeRequest) (*ToggleStormModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleStormMode not implemented")
}
func (UnimplementedTeslaBatteryServiceServer) SetOperationMode(context.Context, *SetOperationModeRequest) (*SetOperationModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperationMode not implemented")
}
func (UnimplementedTeslaBatteryServiceServer) GetPowerUsage(context.Context, *GetPowerUsageRequest) (*GetPowerUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPowerUsage not implemented")
}
func (UnimplementedTeslaBatteryServiceServer) mustEmbedUnimplementedTeslaBatteryServiceServer() {}
func (UnimplementedTeslaBatteryServiceServer) testEmbeddedByValue()                             {}

// UnsafeTeslaBatteryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeslaBatteryServiceServer will
// result in compilation errors.
type UnsafeTeslaBatteryServiceServer interface {
	mustEmbedUnimplementedTeslaBatteryServiceServer()
}

func RegisterTeslaBatteryServiceServer(s grpc.ServiceRegistrar, srv TeslaBatteryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTeslaBatteryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeslaBatteryService_ServiceDesc, srv)
}

func _TeslaBatteryService_GetTeslaBatteryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeslaBatteryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeslaBatteryServiceServer).GetTeslaBatteryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeslaBatteryService_GetTeslaBatteryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeslaBatteryServiceServer).GetTeslaBatteryStatus(ctx, req.(*GetTeslaBatteryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeslaBatteryService_UpdateBackupReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackupReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeslaBatteryServiceServer).UpdateBackupReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeslaBatteryService_UpdateBackupReserve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeslaBatteryServiceServer).UpdateBackupReserve(ctx, req.(*UpdateBackupReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeslaBatteryService_ToggleStormMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleStormModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeslaBatteryServiceServer).ToggleStormMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeslaBatteryService_ToggleStormMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeslaBatteryServiceServer).ToggleStormMode(ctx, req.(*ToggleStormModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeslaBatteryService_SetOperationMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOperationModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeslaBatteryServiceServer).SetOperationMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeslaBatteryService_SetOperationMode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeslaBatteryServiceServer).SetOperationMode(ctx, req.(*SetOperationModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeslaBatteryService_GetPowerUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPowerUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeslaBatteryServiceServer).GetPowerUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeslaBatteryService_GetPowerUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeslaBatteryServiceServer).GetPowerUsage(ctx, req.(*GetPowerUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeslaBatteryService_ServiceDesc is the grpc.ServiceDesc for TeslaBatteryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeslaBatteryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "batteries.v1.TeslaBatteryService",
	HandlerType: (*TeslaBatteryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeslaBatteryStatus",
			Handler:    _TeslaBatteryService_GetTeslaBatteryStatus_Handler,
		},
		{
			MethodName: "UpdateBackupReserve",
			Handler:    _TeslaBatteryService_UpdateBackupReserve_Handler,
		},
		{
			MethodName: "ToggleStormMode",
			Handler:    _TeslaBatteryService_ToggleStormMode_Handler,
		},
		{
			MethodName: "SetOperationMode",
			Handler:    _TeslaBatteryService_SetOperationMode_Handler,
		},
		{
			MethodName: "GetPowerUsage",
			Handler:    _TeslaBatteryService_GetPowerUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/batteries/v1/tesla/tesla.proto",
}
