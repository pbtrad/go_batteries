// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/batteries/v1/givenergy/givenergy.proto

package givenergy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GivEnergyService_GetBatteryState_FullMethodName       = "/batteries.v1.givenergy.GivEnergyService/GetBatteryState"
	GivEnergyService_GetLatestData_FullMethodName         = "/batteries.v1.givenergy.GivEnergyService/GetLatestData"
	GivEnergyService_GetPowerFlow_FullMethodName          = "/batteries.v1.givenergy.GivEnergyService/GetPowerFlow"
	GivEnergyService_GetEnergySummary_FullMethodName      = "/batteries.v1.givenergy.GivEnergyService/GetEnergySummary"
	GivEnergyService_GetBatteryTemperature_FullMethodName = "/batteries.v1.givenergy.GivEnergyService/GetBatteryTemperature"
	GivEnergyService_ChargeBattery_FullMethodName         = "/batteries.v1.givenergy.GivEnergyService/ChargeBattery"
	GivEnergyService_DischargeBattery_FullMethodName      = "/batteries.v1.givenergy.GivEnergyService/DischargeBattery"
)

// GivEnergyServiceClient is the client API for GivEnergyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GivEnergyServiceClient interface {
	GetBatteryState(ctx context.Context, in *GetBatteryStateRequest, opts ...grpc.CallOption) (*GetBatteryStateResponse, error)
	GetLatestData(ctx context.Context, in *GetLatestDataRequest, opts ...grpc.CallOption) (*GetLatestDataResponse, error)
	GetPowerFlow(ctx context.Context, in *GetPowerFlowRequest, opts ...grpc.CallOption) (*GetPowerFlowResponse, error)
	GetEnergySummary(ctx context.Context, in *GetEnergySummaryRequest, opts ...grpc.CallOption) (*GetEnergySummaryResponse, error)
	GetBatteryTemperature(ctx context.Context, in *GetBatteryTemperatureRequest, opts ...grpc.CallOption) (*GetBatteryTemperatureResponse, error)
	ChargeBattery(ctx context.Context, in *ChargeBatteryRequest, opts ...grpc.CallOption) (*ChargeBatteryResponse, error)
	DischargeBattery(ctx context.Context, in *DischargeBatteryRequest, opts ...grpc.CallOption) (*DischargeBatteryResponse, error)
}

type givEnergyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGivEnergyServiceClient(cc grpc.ClientConnInterface) GivEnergyServiceClient {
	return &givEnergyServiceClient{cc}
}

func (c *givEnergyServiceClient) GetBatteryState(ctx context.Context, in *GetBatteryStateRequest, opts ...grpc.CallOption) (*GetBatteryStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBatteryStateResponse)
	err := c.cc.Invoke(ctx, GivEnergyService_GetBatteryState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givEnergyServiceClient) GetLatestData(ctx context.Context, in *GetLatestDataRequest, opts ...grpc.CallOption) (*GetLatestDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestDataResponse)
	err := c.cc.Invoke(ctx, GivEnergyService_GetLatestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givEnergyServiceClient) GetPowerFlow(ctx context.Context, in *GetPowerFlowRequest, opts ...grpc.CallOption) (*GetPowerFlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPowerFlowResponse)
	err := c.cc.Invoke(ctx, GivEnergyService_GetPowerFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givEnergyServiceClient) GetEnergySummary(ctx context.Context, in *GetEnergySummaryRequest, opts ...grpc.CallOption) (*GetEnergySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnergySummaryResponse)
	err := c.cc.Invoke(ctx, GivEnergyService_GetEnergySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givEnergyServiceClient) GetBatteryTemperature(ctx context.Context, in *GetBatteryTemperatureRequest, opts ...grpc.CallOption) (*GetBatteryTemperatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBatteryTemperatureResponse)
	err := c.cc.Invoke(ctx, GivEnergyService_GetBatteryTemperature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givEnergyServiceClient) ChargeBattery(ctx context.Context, in *ChargeBatteryRequest, opts ...grpc.CallOption) (*ChargeBatteryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChargeBatteryResponse)
	err := c.cc.Invoke(ctx, GivEnergyService_ChargeBattery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givEnergyServiceClient) DischargeBattery(ctx context.Context, in *DischargeBatteryRequest, opts ...grpc.CallOption) (*DischargeBatteryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DischargeBatteryResponse)
	err := c.cc.Invoke(ctx, GivEnergyService_DischargeBattery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GivEnergyServiceServer is the server API for GivEnergyService service.
// All implementations must embed UnimplementedGivEnergyServiceServer
// for forward compatibility.
type GivEnergyServiceServer interface {
	GetBatteryState(context.Context, *GetBatteryStateRequest) (*GetBatteryStateResponse, error)
	GetLatestData(context.Context, *GetLatestDataRequest) (*GetLatestDataResponse, error)
	GetPowerFlow(context.Context, *GetPowerFlowRequest) (*GetPowerFlowResponse, error)
	GetEnergySummary(context.Context, *GetEnergySummaryRequest) (*GetEnergySummaryResponse, error)
	GetBatteryTemperature(context.Context, *GetBatteryTemperatureRequest) (*GetBatteryTemperatureResponse, error)
	ChargeBattery(context.Context, *ChargeBatteryRequest) (*ChargeBatteryResponse, error)
	DischargeBattery(context.Context, *DischargeBatteryRequest) (*DischargeBatteryResponse, error)
	mustEmbedUnimplementedGivEnergyServiceServer()
}

// UnimplementedGivEnergyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGivEnergyServiceServer struct{}

func (UnimplementedGivEnergyServiceServer) GetBatteryState(context.Context, *GetBatteryStateRequest) (*GetBatteryStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatteryState not implemented")
}
func (UnimplementedGivEnergyServiceServer) GetLatestData(context.Context, *GetLatestDataRequest) (*GetLatestDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestData not implemented")
}
func (UnimplementedGivEnergyServiceServer) GetPowerFlow(context.Context, *GetPowerFlowRequest) (*GetPowerFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPowerFlow not implemented")
}
func (UnimplementedGivEnergyServiceServer) GetEnergySummary(context.Context, *GetEnergySummaryRequest) (*GetEnergySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnergySummary not implemented")
}
func (UnimplementedGivEnergyServiceServer) GetBatteryTemperature(context.Context, *GetBatteryTemperatureRequest) (*GetBatteryTemperatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatteryTemperature not implemented")
}
func (UnimplementedGivEnergyServiceServer) ChargeBattery(context.Context, *ChargeBatteryRequest) (*ChargeBatteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeBattery not implemented")
}
func (UnimplementedGivEnergyServiceServer) DischargeBattery(context.Context, *DischargeBatteryRequest) (*DischargeBatteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DischargeBattery not implemented")
}
func (UnimplementedGivEnergyServiceServer) mustEmbedUnimplementedGivEnergyServiceServer() {}
func (UnimplementedGivEnergyServiceServer) testEmbeddedByValue()                          {}

// UnsafeGivEnergyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GivEnergyServiceServer will
// result in compilation errors.
type UnsafeGivEnergyServiceServer interface {
	mustEmbedUnimplementedGivEnergyServiceServer()
}

func RegisterGivEnergyServiceServer(s grpc.ServiceRegistrar, srv GivEnergyServiceServer) {
	// If the following call pancis, it indicates UnimplementedGivEnergyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GivEnergyService_ServiceDesc, srv)
}

func _GivEnergyService_GetBatteryState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatteryStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivEnergyServiceServer).GetBatteryState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GivEnergyService_GetBatteryState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivEnergyServiceServer).GetBatteryState(ctx, req.(*GetBatteryStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GivEnergyService_GetLatestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivEnergyServiceServer).GetLatestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GivEnergyService_GetLatestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivEnergyServiceServer).GetLatestData(ctx, req.(*GetLatestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GivEnergyService_GetPowerFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPowerFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivEnergyServiceServer).GetPowerFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GivEnergyService_GetPowerFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivEnergyServiceServer).GetPowerFlow(ctx, req.(*GetPowerFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GivEnergyService_GetEnergySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnergySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivEnergyServiceServer).GetEnergySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GivEnergyService_GetEnergySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivEnergyServiceServer).GetEnergySummary(ctx, req.(*GetEnergySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GivEnergyService_GetBatteryTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatteryTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivEnergyServiceServer).GetBatteryTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GivEnergyService_GetBatteryTemperature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivEnergyServiceServer).GetBatteryTemperature(ctx, req.(*GetBatteryTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GivEnergyService_ChargeBattery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeBatteryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivEnergyServiceServer).ChargeBattery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GivEnergyService_ChargeBattery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivEnergyServiceServer).ChargeBattery(ctx, req.(*ChargeBatteryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GivEnergyService_DischargeBattery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DischargeBatteryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GivEnergyServiceServer).DischargeBattery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GivEnergyService_DischargeBattery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GivEnergyServiceServer).DischargeBattery(ctx, req.(*DischargeBatteryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GivEnergyService_ServiceDesc is the grpc.ServiceDesc for GivEnergyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GivEnergyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "batteries.v1.givenergy.GivEnergyService",
	HandlerType: (*GivEnergyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBatteryState",
			Handler:    _GivEnergyService_GetBatteryState_Handler,
		},
		{
			MethodName: "GetLatestData",
			Handler:    _GivEnergyService_GetLatestData_Handler,
		},
		{
			MethodName: "GetPowerFlow",
			Handler:    _GivEnergyService_GetPowerFlow_Handler,
		},
		{
			MethodName: "GetEnergySummary",
			Handler:    _GivEnergyService_GetEnergySummary_Handler,
		},
		{
			MethodName: "GetBatteryTemperature",
			Handler:    _GivEnergyService_GetBatteryTemperature_Handler,
		},
		{
			MethodName: "ChargeBattery",
			Handler:    _GivEnergyService_ChargeBattery_Handler,
		},
		{
			MethodName: "DischargeBattery",
			Handler:    _GivEnergyService_DischargeBattery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/batteries/v1/givenergy/givenergy.proto",
}
