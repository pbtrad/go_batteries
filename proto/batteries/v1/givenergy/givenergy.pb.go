// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/batteries/v1/givenergy/givenergy.proto

package givenergy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetBatteryStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBatteryStateRequest) Reset() {
	*x = GetBatteryStateRequest{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBatteryStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatteryStateRequest) ProtoMessage() {}

func (x *GetBatteryStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatteryStateRequest.ProtoReflect.Descriptor instead.
func (*GetBatteryStateRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{0}
}

type GetBatteryStateResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SystemSerialNumber string                 `protobuf:"bytes,1,opt,name=system_serial_number,json=systemSerialNumber,proto3" json:"system_serial_number,omitempty"`
	BatterySoc         float32                `protobuf:"fixed32,2,opt,name=battery_soc,json=batterySoc,proto3" json:"battery_soc,omitempty"`
	BatteryCharging    bool                   `protobuf:"varint,3,opt,name=battery_charging,json=batteryCharging,proto3" json:"battery_charging,omitempty"`
	BatteryDischarging bool                   `protobuf:"varint,4,opt,name=battery_discharging,json=batteryDischarging,proto3" json:"battery_discharging,omitempty"`
	SystemStatus       string                 `protobuf:"bytes,5,opt,name=system_status,json=systemStatus,proto3" json:"system_status,omitempty"`
	Timestamp          string                 `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetBatteryStateResponse) Reset() {
	*x = GetBatteryStateResponse{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBatteryStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatteryStateResponse) ProtoMessage() {}

func (x *GetBatteryStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatteryStateResponse.ProtoReflect.Descriptor instead.
func (*GetBatteryStateResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{1}
}

func (x *GetBatteryStateResponse) GetSystemSerialNumber() string {
	if x != nil {
		return x.SystemSerialNumber
	}
	return ""
}

func (x *GetBatteryStateResponse) GetBatterySoc() float32 {
	if x != nil {
		return x.BatterySoc
	}
	return 0
}

func (x *GetBatteryStateResponse) GetBatteryCharging() bool {
	if x != nil {
		return x.BatteryCharging
	}
	return false
}

func (x *GetBatteryStateResponse) GetBatteryDischarging() bool {
	if x != nil {
		return x.BatteryDischarging
	}
	return false
}

func (x *GetBatteryStateResponse) GetSystemStatus() string {
	if x != nil {
		return x.SystemStatus
	}
	return ""
}

func (x *GetBatteryStateResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type GetLatestDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestDataRequest) Reset() {
	*x = GetLatestDataRequest{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDataRequest) ProtoMessage() {}

func (x *GetLatestDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDataRequest.ProtoReflect.Descriptor instead.
func (*GetLatestDataRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{2}
}

type GetLatestDataResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	BatterySoc              float32                `protobuf:"fixed32,1,opt,name=battery_soc,json=batterySoc,proto3" json:"battery_soc,omitempty"`
	PowerFlowBatteryToLoad  float32                `protobuf:"fixed32,2,opt,name=power_flow_battery_to_load,json=powerFlowBatteryToLoad,proto3" json:"power_flow_battery_to_load,omitempty"`
	PowerFlowSolarToBattery float32                `protobuf:"fixed32,3,opt,name=power_flow_solar_to_battery,json=powerFlowSolarToBattery,proto3" json:"power_flow_solar_to_battery,omitempty"`
	PowerFlowGridToBattery  float32                `protobuf:"fixed32,4,opt,name=power_flow_grid_to_battery,json=powerFlowGridToBattery,proto3" json:"power_flow_grid_to_battery,omitempty"`
	PowerFlowBatteryToGrid  float32                `protobuf:"fixed32,5,opt,name=power_flow_battery_to_grid,json=powerFlowBatteryToGrid,proto3" json:"power_flow_battery_to_grid,omitempty"`
	Timestamp               string                 `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetLatestDataResponse) Reset() {
	*x = GetLatestDataResponse{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestDataResponse) ProtoMessage() {}

func (x *GetLatestDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestDataResponse.ProtoReflect.Descriptor instead.
func (*GetLatestDataResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{3}
}

func (x *GetLatestDataResponse) GetBatterySoc() float32 {
	if x != nil {
		return x.BatterySoc
	}
	return 0
}

func (x *GetLatestDataResponse) GetPowerFlowBatteryToLoad() float32 {
	if x != nil {
		return x.PowerFlowBatteryToLoad
	}
	return 0
}

func (x *GetLatestDataResponse) GetPowerFlowSolarToBattery() float32 {
	if x != nil {
		return x.PowerFlowSolarToBattery
	}
	return 0
}

func (x *GetLatestDataResponse) GetPowerFlowGridToBattery() float32 {
	if x != nil {
		return x.PowerFlowGridToBattery
	}
	return 0
}

func (x *GetLatestDataResponse) GetPowerFlowBatteryToGrid() float32 {
	if x != nil {
		return x.PowerFlowBatteryToGrid
	}
	return 0
}

func (x *GetLatestDataResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type GetPowerFlowRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPowerFlowRequest) Reset() {
	*x = GetPowerFlowRequest{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPowerFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerFlowRequest) ProtoMessage() {}

func (x *GetPowerFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerFlowRequest.ProtoReflect.Descriptor instead.
func (*GetPowerFlowRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{4}
}

type GetPowerFlowResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GridPower     float32                `protobuf:"fixed32,1,opt,name=grid_power,json=gridPower,proto3" json:"grid_power,omitempty"`
	SolarPower    float32                `protobuf:"fixed32,2,opt,name=solar_power,json=solarPower,proto3" json:"solar_power,omitempty"`
	BatteryPower  float32                `protobuf:"fixed32,3,opt,name=battery_power,json=batteryPower,proto3" json:"battery_power,omitempty"`
	Timestamp     string                 `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPowerFlowResponse) Reset() {
	*x = GetPowerFlowResponse{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPowerFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerFlowResponse) ProtoMessage() {}

func (x *GetPowerFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerFlowResponse.ProtoReflect.Descriptor instead.
func (*GetPowerFlowResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{5}
}

func (x *GetPowerFlowResponse) GetGridPower() float32 {
	if x != nil {
		return x.GridPower
	}
	return 0
}

func (x *GetPowerFlowResponse) GetSolarPower() float32 {
	if x != nil {
		return x.SolarPower
	}
	return 0
}

func (x *GetPowerFlowResponse) GetBatteryPower() float32 {
	if x != nil {
		return x.BatteryPower
	}
	return 0
}

func (x *GetPowerFlowResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type GetEnergySummaryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEnergySummaryRequest) Reset() {
	*x = GetEnergySummaryRequest{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnergySummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnergySummaryRequest) ProtoMessage() {}

func (x *GetEnergySummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnergySummaryRequest.ProtoReflect.Descriptor instead.
func (*GetEnergySummaryRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{6}
}

type GetEnergySummaryResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TotalSolarGenerated float32                `protobuf:"fixed32,1,opt,name=total_solar_generated,json=totalSolarGenerated,proto3" json:"total_solar_generated,omitempty"`
	TotalBatteryStored  float32                `protobuf:"fixed32,2,opt,name=total_battery_stored,json=totalBatteryStored,proto3" json:"total_battery_stored,omitempty"`
	TotalBatteryUsed    float32                `protobuf:"fixed32,3,opt,name=total_battery_used,json=totalBatteryUsed,proto3" json:"total_battery_used,omitempty"`
	TotalGridImported   float32                `protobuf:"fixed32,4,opt,name=total_grid_imported,json=totalGridImported,proto3" json:"total_grid_imported,omitempty"`
	TotalGridExported   float32                `protobuf:"fixed32,5,opt,name=total_grid_exported,json=totalGridExported,proto3" json:"total_grid_exported,omitempty"`
	Timestamp           string                 `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetEnergySummaryResponse) Reset() {
	*x = GetEnergySummaryResponse{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEnergySummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnergySummaryResponse) ProtoMessage() {}

func (x *GetEnergySummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnergySummaryResponse.ProtoReflect.Descriptor instead.
func (*GetEnergySummaryResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{7}
}

func (x *GetEnergySummaryResponse) GetTotalSolarGenerated() float32 {
	if x != nil {
		return x.TotalSolarGenerated
	}
	return 0
}

func (x *GetEnergySummaryResponse) GetTotalBatteryStored() float32 {
	if x != nil {
		return x.TotalBatteryStored
	}
	return 0
}

func (x *GetEnergySummaryResponse) GetTotalBatteryUsed() float32 {
	if x != nil {
		return x.TotalBatteryUsed
	}
	return 0
}

func (x *GetEnergySummaryResponse) GetTotalGridImported() float32 {
	if x != nil {
		return x.TotalGridImported
	}
	return 0
}

func (x *GetEnergySummaryResponse) GetTotalGridExported() float32 {
	if x != nil {
		return x.TotalGridExported
	}
	return 0
}

func (x *GetEnergySummaryResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type GetBatteryTemperatureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBatteryTemperatureRequest) Reset() {
	*x = GetBatteryTemperatureRequest{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBatteryTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatteryTemperatureRequest) ProtoMessage() {}

func (x *GetBatteryTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatteryTemperatureRequest.ProtoReflect.Descriptor instead.
func (*GetBatteryTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{8}
}

type GetBatteryTemperatureResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Temperature   float32                `protobuf:"fixed32,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Timestamp     string                 `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBatteryTemperatureResponse) Reset() {
	*x = GetBatteryTemperatureResponse{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBatteryTemperatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBatteryTemperatureResponse) ProtoMessage() {}

func (x *GetBatteryTemperatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBatteryTemperatureResponse.ProtoReflect.Descriptor instead.
func (*GetBatteryTemperatureResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{9}
}

func (x *GetBatteryTemperatureResponse) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *GetBatteryTemperatureResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type ChargeBatteryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Watt          int32                  `protobuf:"varint,1,opt,name=watt,proto3" json:"watt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChargeBatteryRequest) Reset() {
	*x = ChargeBatteryRequest{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChargeBatteryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeBatteryRequest) ProtoMessage() {}

func (x *ChargeBatteryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeBatteryRequest.ProtoReflect.Descriptor instead.
func (*ChargeBatteryRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{10}
}

func (x *ChargeBatteryRequest) GetWatt() int32 {
	if x != nil {
		return x.Watt
	}
	return 0
}

type ChargeBatteryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Watt          int32                  `protobuf:"varint,3,opt,name=watt,proto3" json:"watt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChargeBatteryResponse) Reset() {
	*x = ChargeBatteryResponse{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChargeBatteryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeBatteryResponse) ProtoMessage() {}

func (x *ChargeBatteryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeBatteryResponse.ProtoReflect.Descriptor instead.
func (*ChargeBatteryResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{11}
}

func (x *ChargeBatteryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ChargeBatteryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChargeBatteryResponse) GetWatt() int32 {
	if x != nil {
		return x.Watt
	}
	return 0
}

type DischargeBatteryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Watt          int32                  `protobuf:"varint,1,opt,name=watt,proto3" json:"watt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DischargeBatteryRequest) Reset() {
	*x = DischargeBatteryRequest{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DischargeBatteryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DischargeBatteryRequest) ProtoMessage() {}

func (x *DischargeBatteryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DischargeBatteryRequest.ProtoReflect.Descriptor instead.
func (*DischargeBatteryRequest) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{12}
}

func (x *DischargeBatteryRequest) GetWatt() int32 {
	if x != nil {
		return x.Watt
	}
	return 0
}

type DischargeBatteryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Watt          int32                  `protobuf:"varint,3,opt,name=watt,proto3" json:"watt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DischargeBatteryResponse) Reset() {
	*x = DischargeBatteryResponse{}
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DischargeBatteryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DischargeBatteryResponse) ProtoMessage() {}

func (x *DischargeBatteryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DischargeBatteryResponse.ProtoReflect.Descriptor instead.
func (*DischargeBatteryResponse) Descriptor() ([]byte, []int) {
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP(), []int{13}
}

func (x *DischargeBatteryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DischargeBatteryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DischargeBatteryResponse) GetWatt() int32 {
	if x != nil {
		return x.Watt
	}
	return 0
}

var File_proto_batteries_v1_givenergy_givenergy_proto protoreflect.FileDescriptor

var file_proto_batteries_v1_givenergy_givenergy_proto_rawDesc = string([]byte{
	0x0a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x2f, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x8b, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x63, 0x12,
	0x29, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x16,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc8, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x6f,
	0x63, 0x12, 0x3a, 0x0a, 0x1a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a,
	0x1b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x6f, 0x6c, 0x61,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x17, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x6f, 0x6c,
	0x61, 0x72, 0x54, 0x6f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x1a, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x47, 0x72, 0x69, 0x64, 0x54, 0x6f,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x1a, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x6f,
	0x5f, 0x67, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x6f, 0x47,
	0x72, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x67, 0x72, 0x69, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xac, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x1e,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x2a, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x74, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x61, 0x74, 0x74, 0x22, 0x5f, 0x0a, 0x15, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x74, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x61, 0x74, 0x74, 0x22, 0x2d, 0x0a, 0x17,
	0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x74, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x61, 0x74, 0x74, 0x22, 0x62, 0x0a, 0x18, 0x44,
	0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x61, 0x74, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x61, 0x74, 0x74, 0x32,
	0xd0, 0x06, 0x0a, 0x10, 0x47, 0x69, 0x76, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x2e, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2b, 0x2e, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x86, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x2e, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x2e, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x10, 0x44, 0x69, 0x73,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x2f, 0x2e,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x62, 0x74, 0x72, 0x61, 0x64, 0x2f, 0x67, 0x6f, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_batteries_v1_givenergy_givenergy_proto_rawDescOnce sync.Once
	file_proto_batteries_v1_givenergy_givenergy_proto_rawDescData []byte
)

func file_proto_batteries_v1_givenergy_givenergy_proto_rawDescGZIP() []byte {
	file_proto_batteries_v1_givenergy_givenergy_proto_rawDescOnce.Do(func() {
		file_proto_batteries_v1_givenergy_givenergy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_batteries_v1_givenergy_givenergy_proto_rawDesc), len(file_proto_batteries_v1_givenergy_givenergy_proto_rawDesc)))
	})
	return file_proto_batteries_v1_givenergy_givenergy_proto_rawDescData
}

var file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_batteries_v1_givenergy_givenergy_proto_goTypes = []any{
	(*GetBatteryStateRequest)(nil),        // 0: batteries.v1.givenergy.GetBatteryStateRequest
	(*GetBatteryStateResponse)(nil),       // 1: batteries.v1.givenergy.GetBatteryStateResponse
	(*GetLatestDataRequest)(nil),          // 2: batteries.v1.givenergy.GetLatestDataRequest
	(*GetLatestDataResponse)(nil),         // 3: batteries.v1.givenergy.GetLatestDataResponse
	(*GetPowerFlowRequest)(nil),           // 4: batteries.v1.givenergy.GetPowerFlowRequest
	(*GetPowerFlowResponse)(nil),          // 5: batteries.v1.givenergy.GetPowerFlowResponse
	(*GetEnergySummaryRequest)(nil),       // 6: batteries.v1.givenergy.GetEnergySummaryRequest
	(*GetEnergySummaryResponse)(nil),      // 7: batteries.v1.givenergy.GetEnergySummaryResponse
	(*GetBatteryTemperatureRequest)(nil),  // 8: batteries.v1.givenergy.GetBatteryTemperatureRequest
	(*GetBatteryTemperatureResponse)(nil), // 9: batteries.v1.givenergy.GetBatteryTemperatureResponse
	(*ChargeBatteryRequest)(nil),          // 10: batteries.v1.givenergy.ChargeBatteryRequest
	(*ChargeBatteryResponse)(nil),         // 11: batteries.v1.givenergy.ChargeBatteryResponse
	(*DischargeBatteryRequest)(nil),       // 12: batteries.v1.givenergy.DischargeBatteryRequest
	(*DischargeBatteryResponse)(nil),      // 13: batteries.v1.givenergy.DischargeBatteryResponse
}
var file_proto_batteries_v1_givenergy_givenergy_proto_depIdxs = []int32{
	0,  // 0: batteries.v1.givenergy.GivEnergyService.GetBatteryState:input_type -> batteries.v1.givenergy.GetBatteryStateRequest
	2,  // 1: batteries.v1.givenergy.GivEnergyService.GetLatestData:input_type -> batteries.v1.givenergy.GetLatestDataRequest
	4,  // 2: batteries.v1.givenergy.GivEnergyService.GetPowerFlow:input_type -> batteries.v1.givenergy.GetPowerFlowRequest
	6,  // 3: batteries.v1.givenergy.GivEnergyService.GetEnergySummary:input_type -> batteries.v1.givenergy.GetEnergySummaryRequest
	8,  // 4: batteries.v1.givenergy.GivEnergyService.GetBatteryTemperature:input_type -> batteries.v1.givenergy.GetBatteryTemperatureRequest
	10, // 5: batteries.v1.givenergy.GivEnergyService.ChargeBattery:input_type -> batteries.v1.givenergy.ChargeBatteryRequest
	12, // 6: batteries.v1.givenergy.GivEnergyService.DischargeBattery:input_type -> batteries.v1.givenergy.DischargeBatteryRequest
	1,  // 7: batteries.v1.givenergy.GivEnergyService.GetBatteryState:output_type -> batteries.v1.givenergy.GetBatteryStateResponse
	3,  // 8: batteries.v1.givenergy.GivEnergyService.GetLatestData:output_type -> batteries.v1.givenergy.GetLatestDataResponse
	5,  // 9: batteries.v1.givenergy.GivEnergyService.GetPowerFlow:output_type -> batteries.v1.givenergy.GetPowerFlowResponse
	7,  // 10: batteries.v1.givenergy.GivEnergyService.GetEnergySummary:output_type -> batteries.v1.givenergy.GetEnergySummaryResponse
	9,  // 11: batteries.v1.givenergy.GivEnergyService.GetBatteryTemperature:output_type -> batteries.v1.givenergy.GetBatteryTemperatureResponse
	11, // 12: batteries.v1.givenergy.GivEnergyService.ChargeBattery:output_type -> batteries.v1.givenergy.ChargeBatteryResponse
	13, // 13: batteries.v1.givenergy.GivEnergyService.DischargeBattery:output_type -> batteries.v1.givenergy.DischargeBatteryResponse
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_batteries_v1_givenergy_givenergy_proto_init() }
func file_proto_batteries_v1_givenergy_givenergy_proto_init() {
	if File_proto_batteries_v1_givenergy_givenergy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_batteries_v1_givenergy_givenergy_proto_rawDesc), len(file_proto_batteries_v1_givenergy_givenergy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_batteries_v1_givenergy_givenergy_proto_goTypes,
		DependencyIndexes: file_proto_batteries_v1_givenergy_givenergy_proto_depIdxs,
		MessageInfos:      file_proto_batteries_v1_givenergy_givenergy_proto_msgTypes,
	}.Build()
	File_proto_batteries_v1_givenergy_givenergy_proto = out.File
	file_proto_batteries_v1_givenergy_givenergy_proto_goTypes = nil
	file_proto_batteries_v1_givenergy_givenergy_proto_depIdxs = nil
}
